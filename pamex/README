========================================
University of Wisconsin - La Crosse
Software Engineering Master's Capstone
Author: Daniel Weninger
Fall 2022 / Spring 2023
Last Modified: 12/1/2022
========================================

Title: PAMEx Parser

The purpose of the PAMEx Parser is to allow the
administrator or other privilidged user to define a hierarchy of levels as well as
non-hierarchical labels that are to be easily assigned to both files and users. 

Levels
----------
Privilidged users may define and assign levels as a hierarchical system to users and 
files. Only a user with a level that is equivalent or higher to the file in the 
defined hierarchy may access that file.

Labels
-----------
In addition to levels, privilidged users may define and assign a non-hierarchical
label to users and files. In order for a user to access a file with a particular
label, the user must also contain that label as part of their credentials.
 
Makefile and Compiling Project
----------
 - Run "make" in the project file structure to compile the parser
 - Run "make clean" in the project file structure to clear the outputs and
	runnable files

Running the Code
----------
 - Run regularly 
	./parser <code_in_file_name> -p
 - Run in kernel mode (TODO)
	./parser <code_in_file_name> -k

Testing
----------
 - To run with pre-defined tests, run the batch tester script in the test file
	directory
	
	./batch_tester [path_to_test_file_directory] [amount_of_test_files]
 - test files should be named "test<test_number>" where the test number is
	consecutive

The Parser
-----------
 - The PAMEx parser has the job of interpreting
   the input code and outputting a file that the PAMEx File Labeler and 
   User Database Builder (FLUDB) will read.
 - The parser itself is a compiler created using Flex and Bison with a Flex Lexer
   and a Bison Parser

Lexer, Keywords, and Varibles
----------
Keywords:
 - level
 - label
 - set
 - file-assign
 - user-assign
 - restricted
 - unrestricted

Operations:
 - <
 - >
 - ->

Variables:
 - All variables including level, label, file, and user names must start
	with one of the following ".", "/", or an alphabetic letter, 
	followed by any combination of alpha-numeric characters, "_", "-", 
	".", or "/"


Parser, and Syntax
----------
Comments:
Comments are all in-line and the line must begin with a "#" like the following:
	# This is a comment


Parser Definition Section:

Level Definitions:
 - The first section of the File Security Classification code defines the levels and
   labels to be used later, including the ordering of the levels.
 - A level definition comes in two different forms: set and ordered
 - An ordered definition defines if a level comes before or after another level and
   a set level definition has a set placement in the hierarchy. Therefore, you must
   have a set level definition in place before an ordered level definition occurs.


Set Level Definitions:
 - A set definition looks like the following:

	level <level_name> (set <unrestricted_or_restricted>);
 
 - level and set are both keywords in this instance and must be used verbatum.
 - <level_name> is a variable name that can be refered to later (see "Lexer,
   Keywords, and Variables" section for naming conventions).
 - "unrestricted" and "restricted" are both key words here. When using the "set"
   operation, the level must be set to one of those two placements. 
 - "unrestricted" implies a level placement of 0 and "restricted" implies a level
   placement of 1.
 - "unrestricted" means that any user in the system may access the file with no
   credentials necessary.
 - "restricted" is at the bottom of the level placement hierarchy which means that
   anyone with the hierarchy placment of the "restricted" level name or above may
   access this file.


Level Order Definitions:
 - Order definitions can be defined to place directly before or after any other
   defined level
 - An order definition looks like the following:

	level <level_name> (> <prev_defined_level_name>);
  OR
	level <level_name> (< <prev_defined_level_name>);

 - level is used as a keyword here.
 - <level_name> is a variable name that can be used later (see "Lexer, Keywords, and
   Variables" section for naming conventions).
 - ">" is used to define a new level that places directly above a predefined level.
   In other words, a user with access to this newly defined level can access it as
   well as the predefined level.
 - < is used to define a new level that places directly below a predefined level. 
   In other words, a user with access to this newly defined level can access it but
   not the predefined level.


Label Definitions:
 - A label is defined to be assigned to files and users later.
 - A label definition looks like the following:

	label <label_name>;

 - "label" is a keyword here and must be used verbatum.
 - <label_name> is a variable name that can be used later (see "Lexer, Keywords, and
   Variables" section for naming conventions).


Assignment Section:
 - Once a level or a label is defined, it may then be assigned to a file and/or a
   user
 - A file may only have one level but may have multiple labels
 - A file may only be assigned a label if it has a level as well
 - A user may only have one level but may have multiple labels


File Assignments:

 - A file assignment looks like the following:

	file-assign <level_name> [<label_list>] -> <file_name>;

 - file-assign is a keyword and must be used verbatum
 - <level_name> is the name of an already defined level (see "Level Definitions)
 - [<label_list>] is an optional list of labels. A file can be assigned zero or more
   labels which are displayed in square brackets and delimited by ","s like the
   following:

	[label1, label2, label3]

 - If a file does not contain any labels, simply do not add the label list syntax
 - -> is an operand which means to assign the specified level and label names to a
   file
 - <file_name> is the path to a file in the system


User Assignments:
 - A user assignment looks like the following:

	user-assign <level_name> [<label_list>] -> <user_name>;

 - user-assign is a keyword and must be used verbatum
 - <level_name> is the name of an already defined level
 - [<label_list>] is an optional list of labels. A user can be assigned zero or more
   labels which are displayed in square brackets and delimited by ","s like the
   following:

	[label1, label2, label3]

 - If a user does not contain any labels, simply do not add the label list syntax
 - -> is an operand which means to assign the specified level and label names to a
   user
 - <user_name> is the name of a user that is in the linux system


Example File:
-------------
# This is a comment

# Define Levels and Labels #
level non-confidential (set unrestricted);
level confidential (set restricted);
level secret (> confidential);
label additional;
label more-access;
label extra-access;
level top-secret (> secret);
level extra-secret (< top-secret);

# Assign Levels and Labels to Files #
file-assign secret -> file1.txt;

file-assign confidential [more-access, extra-access] -> file2.txt

user-assign top-secret [additional] -> adam;

Output of the PAMEx Parser
---------
 - The output of the PAMEx Parser is a text file
	depicting the user and file definitions in an easy to read format
	for the FLUDB tool
 - This Definitions Output File gives a line-by-line breakdown of the assignments
	passed in to the parser
 - Each line depicts whether a file or a level is being assigned to a file or a
	user, which entity (user or file) is being accessed, and the label or
	level information
 - Each line is formatted as the following:

	<operation> <entity> <data>

 - operation can be one of four options:
	FILE_LEVEL  - to assign a level to a file
	FILE_LABEL  - to assign a label to a file
	USER_LEVEL  - to assign a level to a user
	USER_LABEL  - to assign a label to a user

 - entity is the name of the file or the user that the level or label is being
	assigned
 
 - data is the the level or label data
   > In the case of level this means the level's name and the hierarchical number
	like the following:

	secret:2 

   > In the case of label this means the label's name like the following:

	more_access 



